@using System.Collections.Generic
@using Spartane.Web.Areas.Frontal.Models
@using Spartane.Web.Helpers
@model Spartane.Web.Areas.Frontal.Models.Detalle_Aseguramiento_de_Cargador_CartuchosAdvanceSearchModel
@{

    var filters = (List<SelectListItem>)ViewBag.Filter;
}
<style>
    .input-validation-error {
        background: rgb(251, 227, 228);
        border: 1px solid #fbc2c4;
        color: #8a1f11;
    }

    .MarginBottom {
        margin-bottom: 1%;
    }

    #divAdvanceSearch input {
        margin-right: 2%;
    }

    #divAdvanceSearch button {
        margin-right: 2%;
    }

    #divAdvanceSearch select {
        margin-right: 2%;
    }

    #divAdvanceSearch h3 {
        margin-top: 2%;
    }

</style>
<div class="wrapper wrapper-content animated fadeInRight">
    <div class="ibox float-e-margins" id="divAdvanceSearch">
        <div class="ibox-content">
            @using (Html.BeginForm("ShowAdvanceFilter", "Detalle_Aseguramiento_de_Cargador_Cartuchos", FormMethod.Post, new { @id = "frmAdvanceSearch", @role = "form" }))
            {
				<input type="hidden" value="-1" name="idFilter" id="idFilter" />
                <div class="MarginBottom ">
                    <h3>@Resources.Detalle_Aseguramiento_de_Cargador_CartuchosResources.Clave</h3>
                </div>
                <div class="MarginBottom form-inline">
                    <label class="">@Resources.Resources.From:</label>
                    @Html.TextBoxFor(m => m.FromClave, new { @class = "form-control greaterThanZero", @type = "text", @onkeypress = "return isNumberKey(this, event);", @id = "txtAdvanceFromClave" })
                    @Html.ValidationMessageFor(m => m.FromClave)
                    <label class="">@Resources.Resources.To: </label>
                    @Html.TextBoxFor(m => m.ToClave, new { @class = "form-control greaterThan greaterThanZero", @type = "text", @onkeypress = "return isNumberKey(this, event);", @id = "txtAdvanceToClave", @data_min = "txtAdvanceFromClave" })
                    @Html.ValidationMessageFor(m => m.ToClave)
                </div>
                <div class="MarginBottom ">
                    <h3>@Resources.Detalle_Aseguramiento_de_Cargador_CartuchosResources.cartuchos_municiones</h3>
                </div>
                <div class="MarginBottom form-inline">
                    <label class="">@Resources.Resources.From:</label>
                    @Html.TextBoxFor(m => m.Fromcartuchos_municiones, new { @class = "form-control greaterThanZero", @type = "text", @onkeypress = "return isNumberKey(this, event);", @id = "txtAdvanceFromcartuchos_municiones" })
                    @Html.ValidationMessageFor(m => m.Fromcartuchos_municiones)
                    <label class="">@Resources.Resources.To: </label>
                    @Html.TextBoxFor(m => m.Tocartuchos_municiones, new { @class = "form-control greaterThan greaterThanZero", @type = "text", @onkeypress = "return isNumberKey(this, event);", @id = "txtAdvanceTocartuchos_municiones", @data_min = "txtAdvanceFromcartuchos_municiones" })
                    @Html.ValidationMessageFor(m => m.Tocartuchos_municiones)
                </div>
                <div class="MarginBottom">
                    <h3>@Resources.Detalle_Aseguramiento_de_Cargador_CartuchosResources.Cartuchos_Habiles</h3>
                </div>
                <div class="MarginBottom form-inline">
                    <label class="">@Resources.Resources.Filter:</label>
                    @Html.DropDownListFor(m => m.Cartuchos_HabilesFilter, filters, new { @class = "form-control", @id = "ddlCartuchos_HabilesFilter" })
                    @Html.TextBoxFor(m => m.Cartuchos_Habiles, new { @class = "form-control", @type = "text", @id = "txtCartuchos_Habiles" })
                </div>
                <div class="MarginBottom ">
                    <h3>@Resources.Detalle_Aseguramiento_de_Cargador_CartuchosResources.Cartuchos_Percutidos</h3>
                </div>
                <div class="MarginBottom form-inline">
                    <label class="">@Resources.Resources.From:</label>
                    @Html.TextBoxFor(m => m.FromCartuchos_Percutidos, new { @class = "form-control greaterThanZero", @type = "text", @onkeypress = "return isNumberKey(this, event);", @id = "txtAdvanceFromCartuchos_Percutidos" })
                    @Html.ValidationMessageFor(m => m.FromCartuchos_Percutidos)
                    <label class="">@Resources.Resources.To: </label>
                    @Html.TextBoxFor(m => m.ToCartuchos_Percutidos, new { @class = "form-control greaterThan greaterThanZero", @type = "text", @onkeypress = "return isNumberKey(this, event);", @id = "txtAdvanceToCartuchos_Percutidos", @data_min = "txtAdvanceFromCartuchos_Percutidos" })
                    @Html.ValidationMessageFor(m => m.ToCartuchos_Percutidos)
                </div>
                <div class="MarginBottom ">
                    <h3>@Resources.Detalle_Aseguramiento_de_Cargador_CartuchosResources.cargadores</h3>
                </div>
                <div class="MarginBottom form-inline">
                    <label class="">@Resources.Resources.From:</label>
                    @Html.TextBoxFor(m => m.Fromcargadores, new { @class = "form-control greaterThanZero", @type = "text", @onkeypress = "return isNumberKey(this, event);", @id = "txtAdvanceFromcargadores" })
                    @Html.ValidationMessageFor(m => m.Fromcargadores)
                    <label class="">@Resources.Resources.To: </label>
                    @Html.TextBoxFor(m => m.Tocargadores, new { @class = "form-control greaterThan greaterThanZero", @type = "text", @onkeypress = "return isNumberKey(this, event);", @id = "txtAdvanceTocargadores", @data_min = "txtAdvanceFromcargadores" })
                    @Html.ValidationMessageFor(m => m.Tocargadores)
                </div>

                <div class="MarginBottom form-inline">
                    <input type="submit" class="btn btn-primary" value="@Resources.Resources.Search"><a class="btn btn-primary" href="@Url.Content("~/Frontal/Detalle_Aseguramiento_de_Cargador_Cartuchos/")" value=" ">@Resources.Resources.Cancelar</a>
                </div>
            }
        </div>
    </div>
</div>

<script>
    function InitiateAdvanceSearch() {
        var advanceSearch = {}, hasParameter = false;
        if ($("#txtAdvanceFromClave").val() != "" || $("#txtAdvanceToClave").val() != "") {
            hasParameter = true;
            advanceSearch.Detalle_Aseguramiento_de_Cargador_CartuchosClaveFrom = $("#txtAdvanceFromClave").val();
            advanceSearch.Detalle_Aseguramiento_de_Cargador_CartuchosClaveTo = $("#txtAdvanceToClave").val();
        }
        if ($("#txtAdvanceFromcartuchos_municiones").val() != "" || $("#txtAdvanceTocartuchos_municiones").val() != "") {
            hasParameter = true;
            advanceSearch.Detalle_Aseguramiento_de_Cargador_Cartuchoscartuchos_municionesFrom = $("#txtAdvanceFromcartuchos_municiones").val();
            advanceSearch.Detalle_Aseguramiento_de_Cargador_Cartuchoscartuchos_municionesTo = $("#txtAdvanceTocartuchos_municiones").val();
        }
        if ($("#txtAdvanceCartuchos_Habiles").val() != "") {
            hasParameter = true;
            advanceSearch.Detalle_Aseguramiento_de_Cargador_CartuchosCartuchos_Habiles = $("#txtAdvanceCartuchos_Habiles").val();
            advanceSearch.Detalle_Aseguramiento_de_Cargador_CartuchosCartuchos_HabilesSearchType = $("#ddlAdvanceCartuchos_HabilesFilter").val();
        }
        if ($("#txtAdvanceFromCartuchos_Percutidos").val() != "" || $("#txtAdvanceToCartuchos_Percutidos").val() != "") {
            hasParameter = true;
            advanceSearch.Detalle_Aseguramiento_de_Cargador_CartuchosCartuchos_PercutidosFrom = $("#txtAdvanceFromCartuchos_Percutidos").val();
            advanceSearch.Detalle_Aseguramiento_de_Cargador_CartuchosCartuchos_PercutidosTo = $("#txtAdvanceToCartuchos_Percutidos").val();
        }
        if ($("#txtAdvanceFromcargadores").val() != "" || $("#txtAdvanceTocargadores").val() != "") {
            hasParameter = true;
            advanceSearch.Detalle_Aseguramiento_de_Cargador_CartuchoscargadoresFrom = $("#txtAdvanceFromcargadores").val();
            advanceSearch.Detalle_Aseguramiento_de_Cargador_CartuchoscargadoresTo = $("#txtAdvanceTocargadores").val();
        }

        advanceSearchQuery = hasParameter ? JSON.stringify(advanceSearch) : "";
        $('#tblDetalle_Aseguramiento_de_Cargador_Cartuchos').DataTable().draw();
        return false;
    }

    var advanceSearchQuery = "", isDetalle_Aseguramiento_de_Cargador_CartuchosTextSearch = true;

    $(document).ready(function () {
        $('.clock').clockpicker();
		$('.date').datepicker({
			todayBtn: "linked",
			keyboardNavigation: false,
			forceParse: false,
			calendarWeeks: true,
			autoclose: true,
			format: "@ConfigurationProperty.DateFormatDatePicker"
		});

    });
</script>


@section Styles {
    @Styles.Render("~/Content/plugins/chosen/chosenStyles")
    @Styles.Render("~/plugins/dateRangeStyles")
    @Styles.Render("~/plugins/dataPickerStyles")
    @Styles.Render("~/plugins/clockpickerStyles")

}

@section Scripts {
    @Scripts.Render("~/plugins/chosen")
    @Scripts.Render("~/plugins/dataPicker")
    @Scripts.Render("~/plugins/clockpicker")


    <script>
        //Adding Rules
        jQuery.validator.unobtrusive
      .adapters.addSingleVal("isnumberafter", "propertyname");
        jQuery.validator.unobtrusive
    .adapters.addSingleVal("isdateafter", "propertyname");

        //Number after method
        jQuery.validator.addMethod("isnumberafter", function (val, element, other) {
            var modelPrefix = element.name.substr(
                0, element.name.lastIndexOf(".") + 1);
            var otherVal = $("[name=" + modelPrefix + other + "]").val();
            if (val && otherVal) {
                //if (Date.parse(val) <= Date.parse(otherVal)) {
                if (Number(val) < Number(otherVal)) {
                    return false;
                }
                        }
            return true;
        });

        //Date after after method
        jQuery.validator.addMethod("isdateafter", function (val, element, other) {
            var modelPrefix = element.name.substr(
                0, element.name.lastIndexOf(".") + 1);
            var otherVal = $("[name=" + modelPrefix + other + "]").val();
            if (val && otherVal) {

                if (GetDateObject(val) < GetDateObject(otherVal)) {

                    return false;
                    }
                }
            return true;
            });


        function GetDateObject(value) {
            var delimiter = GetDelimiter(dateFormat);
            var dateCollection = value.split(delimiter);
            var formatCollection = dateFormat.split(delimiter);
            var dateModel = GetDateModel(dateCollection, formatCollection);
            return new Date(dateModel.Year, dateModel.Month - 1, dateModel.Day);
        }
        //Used to get the date model by parsing the date and the format
        function GetDateModel(dateCollection,formatCollection) {
            var day, month, year;
            for (var i = 0; i < formatCollection.length; i++) {
                switch (formatCollection[i][0].toUpperCase()) {
                
                    case "D":
                        day = dateCollection[i];
                        break;

                    case "Y":
                        year = dateCollection[i];
                        break;

                    case "M":
                        month = dateCollection[i];
                        break;
                }
            }

            return {
                Day:day,
                Month:month,
                Year:year
            };
        }

        function GetDelimiter(format) {

            for (var i = 0; i < format.length; i++) {
                if (/[~`!#$%\^&*+=\-\[\]\\';,/{}|\\":<>\?]/g.test(format[i])) {
                    return format[i];
                }
            }
            return null;
        }

        var dateFormat = "@ConfigurationProperty.DateFormatDatePicker";

        $(document).ready(function () {
            $('.input-daterange').datepicker({
                keyboardNavigation: false,
                forceParse: false,
                autoclose: true,
                format: dateFormat,
                message: 'The date is not a valid'
            });

            $(".chosen-select").chosen({ width: "22%", no_results_text: "Oops, nothing found!" });
			if ($('#IsFilterModal').val() == 'true') {
                $('.ShowAdvanceFilter #right-sidebar').css('display', 'none');
                $('.ShowAdvanceFilter .navbar-default').css('display', 'none');
                $('.ShowAdvanceFilter .border-bottom').css('display', 'none');
                $('.ShowAdvanceFilter #page-wrapper').css('margin', '0 auto');
                $('.ShowAdvanceFilter .btn-save').val('@Resources.Resources.Filter');
                $('.ShowAdvanceFilter .btn-cancelar').attr('data-dismiss', 'modal');
                $('.ShowAdvanceFilter .btn-cancelar').removeAttr('href');
                $('#idFilter').val($('#IdReport').val());
            }
        });

    </script>
}

